at(array, index) - возвращает элемент массива на позиции index. Если index отрицательный, возвращает элемент, отсчитывая позицию с конца массива (например, вызов at([2, 3, 5, 7], -1) должен вернуть число 7).



includes(array, value) - возвращает true, если массив содержит значение value. Иначе - false.

indexOf(array, value[, fromIndex]) - возвращает индекс первого элемента, значение которого равно value. Если подходящий элемент не найден, возвращает -1. Если передан параметр fromIndex, поиск должен начинаться с индекса fromIndex.

lastIndexOf(array, value[, fromIndex]) - возвращает индекс первого элемента, значение которого равно value. Если подходящий элемент не найден, возвращает -1. Если передан параметр fromIndex, поиск должен начинаться с индекса fromIndex. Если fromIndex отрицательный, отсчитывать позицию с конца массива.

join(array, separator) - объединяет все элементы массива в одну строку, разделяя их символом (или строкой) separator. Если массив пустой, возвращает пустую строку.

concat(array1, array2) - возвращает новый массив, содержащий все элементы из массивов array1 и array2 (сначала все элементы первого, затем все элементы второго)

fill(array, value[, start[, end]]) - заполняет массив значениями value (просто заменяет все существующие в массиве значения). Если передан параметр start, начинает заполнять только с этой позиции. Если передан параметр end, начинает заполнять только до этой позиции (не включительно).

reverse(array) - разворачивает элементы массива в обратном порядке.

slice(array[, start[, end]]) - возвращает массив, содержащий элементы с позиции start по позицию end. Если start или end - отрицательные, брать позиции с конца массива.

* splice(array, start[, deleteCount[, ...items]]) - удаляет из массива элементы, начиная с позиции start. Если передан параметр deleteCount, будет удалено только указанное количество элементов. Если передан параметр items, вместо удаленных элементов будут вставлены указанные элементы.



forEach(array, callback) - принимает функцию, которая принимает элемент массива и ничего не возвращает. Вызывает функцию для каждого элемента массива.

filter(array, callback) - принимает функцию, которая принимает элемент массива и возвращает true/false. Возвращает новый массив, который содержит только те элементы, для которых функция вернет true.

find(array, callback) - принимает функцию, которая принимает элемент массива и возвращает true/false. Возвращает первый элемент массива, для которого функция вернет true. Если подходящий элемент не найден, возвращает undefined.

findIndex(array, callback) - принимает функцию, которая принимает элемент массива и возвращает true/false. Возвращает индекс первого элемента массива, для которого функция вернет true. Если подходящий элемент не найден, возвращает -1.

every(array, callback) - принимает функцию, которая принимает элемент массива и возвращает true/false. Возвращает true, если для всех элементов массива функция вернет true.

some(array, callback) - принимает функцию, которая принимает элемент массива и возвращает true/false. Возвращает true, если хотя бы для одного из элементов массива функция вернет true.

map(array, callback) - принимает функцию, которая принимает элемент массива и возвращает любое значение. Возвращает новый массив, который содержит значения, которые вернет функция для каждого из элементов массива.

* reduce(array, callback[, initialValue]) - принимает функцию, которая принимает значение и элемент массива и возвращает значение.
Вызывает функцию для каждого элемента массива, передавая в нее значение с прошлого вызова и сам элемент массива.
Возвращает итоговое значение, получившееся после всех вызовов. Если передан параметр initialValue, то это значение должно использоваться как стартовое.
Если параметр не указан, за стартовое значение должен считаться первый элемент массива. Если массив пустой и указан параметр initialValue, возвращать initialValue.
Если не указан, должно выбрасываться исключение.
Пример использования такой функции:
reduce([1, 2, 3, 4], function (previous, current) { return previous + current })
должен вернуть число 10
Пример с параметром initialValue:
reduce([1, 2, 3, 4], function (previous, current) { return previous + current }, 1000)
должен вернуть число 1010

reduceRight(array, callback[, initialValue]) - делает то же самое, что и reduce, но проходит массив в обратном порядке.

* groupBy(array, callback) - принимает функцию, которая принимает элемент массива и возвращает строку. Группирует элементы массива по значению, которое функция вернет для каждого из элементов массива и возвращает объект, в котором в качестве ключей будут значения, которые вернула функция, а в качестве значений массивы элементов, соответствующих этому ключу.
Например, вызов:
groupBy([15, 74, 325, 52, 34, 164], function (item) { return (item % 10).toString() })
должен вернуть
{ 2: [52], 4: [74, 34, 164], 5: [15, 325] }

* sort(array[, callback]) - сортирует массив, сравнивая элементы как строки (для чисел тоже - так функция работает в JS).
Если передан параметр callback (функция, которая принимает два элемента массива и возвращает -1, 0, 1.
При -1 считается, что первый элемент меньше второго, при 1 считается, что первый элемент больше второго, при 0 считается, что они равны),
сортировка должна использовать возвращаемое этой функцией значение. Если значение не равно 0, нужно отсортировать сравниваемые элементы.
Если же равно 0, сортировать эти два элемента не нужно.



flat(array[, depth]) - возвращает новый массив, в котором элементы из всех вложенные массивы развернуты и теперь лежат в самом массиве (примеры: вызов flat([1, [2, 3], [4, 5, 6]]) вернет [1, 2, 3, 4, 5, 6], а вызов flat([1, [2, 3], [4, [5, 6]]]) вернет [1, 2, 3, 4, [5, 6]). Если передан параметр depth, то должно разворачиваться указанное количество уровней вложенности подмассивов (например, вызов flat([1, [2, 3], [4, [5, 6]]], 2) должен вернуть [1, 2, 3, 4, 5, 6]).

flatMap(array, callback) - принимает функцию, которая принимает элемент массива и возвращает массив. Возващает новый массив, который содержит все элементы их всех массивов, которые вернет функция для каждого элемента массива. Другими словами, эта функция будет делать то же самое, что и вызов flat(map(array, callback)), но будет делать это оптимально.



push/pop/unshift/shift - можно попробовать, но тут нужно знать тонкости, как реализованы массивы.